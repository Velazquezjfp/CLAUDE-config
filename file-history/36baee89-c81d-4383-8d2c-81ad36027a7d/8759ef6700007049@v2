# Frontend UI Cleanup - Constraint Duplication Removal

**Date**: October 23, 2025
**Issue**: Duplicate constraint fields appearing in both Constraints page and Solver page
**Status**: ✅ COMPLETED

## Problem Identified

The Run Solver page contained duplicate constraint configuration fields that already existed in the Constraints page:

**Duplicated Fields:**
- `max_travel_time_minutes` - appeared in both Constraints and Solver pages
- `team_cohesion_percentage` - appeared in both Constraints and Solver pages

This created confusion about which values would be used during solver execution.

## Solution Applied

**Clean Separation of Concerns:**
- **Constraints Page** (`/constraints`) → Single source of truth for ALL constraint settings
- **Solver Page** (`/solver`) → Only runtime settings (plan name, objective, time limit)

## Changes Made

### File: `frontend/src/pages/SolverPage.jsx`

**1. Removed from state:**
```javascript
// REMOVED
max_travel_time_minutes: 120,
team_cohesion_percentage: 70

// KEPT
name: '',
objective: 'both',
time_limit_seconds: 300
```

**2. Replaced "Advanced Parameters" section:**
- **Before**: 3 fields (time limit, max travel, team cohesion)
- **After**: 1 field (time limit only)

**3. Added informational note:**
```
"Note: Constraint settings (travel time, team cohesion, work hours, etc.)
are managed in the Constraints page."
```

**4. Updated footer message:**
```
"The solver will create assignments using constraints configured
in the Constraints page."
```

## Backend Behavior (No Changes Needed)

The backend already correctly uses database constraints:
- `solver_service.py:load_problem_from_db()` reads all constraints from database
- Legal constraints stored in `legal_constraints` table
- Solver uses single source of truth (database)

## Testing Results

✅ **Test Case 1 executed successfully:**
- Config sent: `{name, objective, time_limit_seconds}` only
- Solver found: FEASIBLE solution
- Assignments: 10
- Total Cost: 2,718.75 CHF
- Used database constraints: max_travel=120min, team_cohesion=90%

## Benefits Achieved

✅ **Single Source of Truth**
- All constraint settings managed in one place (Constraints page)
- No confusion about which values are used

✅ **Cleaner UX**
- Solver page focused on "what optimization to run" (objective + time limit)
- Constraints page focused on "how to optimize" (legal + business rules)

✅ **Better Workflow**
1. Configure constraints once in Constraints page
2. Run multiple solver tests with different objectives
3. No need to re-enter constraint values each time

✅ **Minimal Code Changes**
- Only 1 file modified: `SolverPage.jsx`
- No backend changes required
- No database migrations needed

## User Impact

**Before:** Users could set constraints in two places, causing confusion

**After:** Clear workflow:
1. Go to Constraints page → Set constraint values
2. Go to Solver page → Choose objective and run
3. View results in Plans page

## Architecture Notes

This refactoring establishes proper separation:
- **System Configuration** → Constraints page (persistent settings)
- **Execution Request** → Solver page (one-time run parameters)

This is analogous to:
- Settings app vs. Run button
- Config file vs. Command-line flags
- Database constraints vs. Query parameters

## Files Modified

1. `frontend/src/pages/SolverPage.jsx` - Removed duplicate constraint fields

## Files NOT Modified (Working as Expected)

- `frontend/src/pages/ConstraintsPage.jsx` - Already correct
- `api/solver_service.py` - Already uses database constraints
- `api/routes/solver.py` - API backwards compatible
- Database schema - No changes needed

## Backwards Compatibility

The API still accepts `max_travel_time_minutes` and `team_cohesion_percentage` in requests, but they are optional and not used. The solver always uses database constraints. This ensures:
- Old API clients still work
- No breaking changes
- Clean migration path

## Future Enhancements (Optional)

If desired, could add:
1. Visual indicator on Solver page showing current constraint values
2. Quick link to Constraints page from Solver page (already added)
3. Constraint "presets" for common scenarios

## Conclusion

The UI is now cleaner, more intuitive, and follows proper separation of concerns. Users have a single place to manage constraints and can focus on choosing optimization objectives when running the solver.
