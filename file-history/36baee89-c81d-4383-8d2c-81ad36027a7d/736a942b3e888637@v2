#!/usr/bin/env python3
"""
Test script to identify which constraint causes infeasibility.
Tests solver with progressively added constraints to pinpoint the problem.
"""
import sys
from pathlib import Path

# Add parent directory to path
parent_dir = Path(__file__).parent.parent
sys.path.append(str(parent_dir))

from solver import CFFScheduler
from api.solver_service import SolverService
from database.db_manager import DatabaseManager

def test_with_constraints(enabled_constraints):
    """Test solver with specific constraints enabled."""
    print("\n" + "=" * 80)
    print(f"Testing with constraints: {', '.join(enabled_constraints)}")
    print("=" * 80)

    # Load problem data
    db = DatabaseManager()
    solver_service = SolverService(db)
    problem_data = solver_service.load_problem_from_db()

    # Create custom scheduler
    scheduler = CFFScheduler(problem_data)

    # Add decision variables (always needed)
    scheduler.create_decision_variables()

    # Add request fulfillment (always needed - must cover all requests)
    if 'fulfillment' in enabled_constraints:
        scheduler.add_request_fulfillment_constraints()

    # Progressively add other constraints
    if 'qualifications' in enabled_constraints:
        scheduler.add_qualification_constraints()

    if 'availability' in enabled_constraints:
        scheduler.add_availability_constraints()

    if 'night_shift' in enabled_constraints:
        scheduler.add_night_shift_constraints()

    if 'non_overlap' in enabled_constraints:
        scheduler.add_non_overlap_constraints()

    if 'daily_tracking' in enabled_constraints:
        scheduler.create_daily_tracking_variables()

    if 'daily_hours' in enabled_constraints:
        scheduler.add_daily_hour_limits()

    if 'weekly_hours' in enabled_constraints:
        scheduler.add_weekly_hour_limits()

    if 'rest_periods' in enabled_constraints:
        scheduler.add_rest_period_constraints()

    if 'max_consecutive' in enabled_constraints:
        scheduler.add_max_consecutive_workdays_constraints()

    # Set objective (simple travel minimization)
    scheduler.set_objective(objective_type='travel')

    # Solve
    feasible = scheduler.solve(time_limit_seconds=60)

    if feasible:
        solution = scheduler.get_solution()
        print(f"\n✓ FEASIBLE SOLUTION FOUND")
        print(f"  Assignments: {sum(len(reqs) for reqs in solution['assignments'].values())}")
        print(f"  Solve time: {solution['statistics']['solve_time']:.2f}s")
        return True
    else:
        print(f"\n✗ INFEASIBLE - No solution found")
        return False


def main():
    """Run progressive constraint tests."""
    print("\n" + "=" * 80)
    print("CONSTRAINT RELAXATION TEST")
    print("=" * 80)
    print("\nThis test progressively adds constraints to identify which one causes infeasibility.")

    # Test scenarios in order of complexity
    scenarios = [
        {
            'name': 'Minimal (fulfillment only)',
            'constraints': ['fulfillment']
        },
        {
            'name': 'With qualifications',
            'constraints': ['fulfillment', 'qualifications']
        },
        {
            'name': 'With availability',
            'constraints': ['fulfillment', 'qualifications', 'availability']
        },
        {
            'name': 'With non-overlap',
            'constraints': ['fulfillment', 'qualifications', 'availability', 'non_overlap']
        },
        {
            'name': 'With daily tracking & hours',
            'constraints': ['fulfillment', 'qualifications', 'availability', 'non_overlap', 'daily_tracking', 'daily_hours']
        },
        {
            'name': 'With weekly hours',
            'constraints': ['fulfillment', 'qualifications', 'availability', 'non_overlap', 'daily_tracking', 'daily_hours', 'weekly_hours']
        },
        {
            'name': 'With rest periods',
            'constraints': ['fulfillment', 'qualifications', 'availability', 'non_overlap', 'daily_tracking', 'daily_hours', 'weekly_hours', 'rest_periods']
        },
        {
            'name': 'FULL (all constraints)',
            'constraints': ['fulfillment', 'qualifications', 'availability', 'non_overlap', 'daily_tracking', 'daily_hours', 'weekly_hours', 'rest_periods', 'max_consecutive']
        }
    ]

    results = []
    first_failure = None

    for scenario in scenarios:
        feasible = test_with_constraints(scenario['constraints'])
        results.append((scenario['name'], feasible))

        if not feasible and first_failure is None:
            first_failure = scenario['name']

    # Summary
    print("\n" + "=" * 80)
    print("SUMMARY")
    print("=" * 80)

    for name, feasible in results:
        status = "✓ FEASIBLE  " if feasible else "✗ INFEASIBLE"
        print(f"{status} - {name}")

    print()

    if first_failure:
        print(f"⚠️  FIRST FAILURE at: {first_failure}")
        print(f"\nThis indicates the problem constraint is one of:")

        # Identify new constraints in failing scenario
        failing_scenario = next(s for s in scenarios if s['name'] == first_failure)
        previous_scenario = None
        for s in scenarios:
            if s['name'] == first_failure:
                break
            previous_scenario = s

        if previous_scenario:
            new_constraints = set(failing_scenario['constraints']) - set(previous_scenario['constraints'])
            for constraint in new_constraints:
                print(f"  - {constraint}")

        print("\nRecommendations:")
        print("  1. Review the constraint logic in solver.py")
        print("  2. Check if constraint parameters in database are too restrictive")
        print("  3. Consider relaxing the identified constraint(s)")
    else:
        print("✓ ALL SCENARIOS FEASIBLE - Issue may be elsewhere!")

    print()

if __name__ == '__main__':
    main()
