import { useState, useEffect } from 'react';
import { createResource, updateResource, getLocations } from '../services/api';
import Modal from './Modal';

const QUALIFICATIONS = [
  'catenary_work',
  'electrical_systems',
  'heavy_equipment',
  'safety_officer',
  'signaling',
  'team_leader',
  'track_maintenance',
  'welding'
];

export default function ResourceForm({ isOpen, onClose, onSave, resource }) {
  const [locations, setLocations] = useState([]);
  const [formData, setFormData] = useState({
    id: '',
    name: '',
    team: '',
    home_location: '',
    contract_type: 'day',
    weekly_hours: 40,
    resource_type: 'internal',
    cost_per_hour: 30,
    qualifications: [],
    holidays: []
  });
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchLocations();
  }, []);

  useEffect(() => {
    if (resource) {
      setFormData({
        id: resource.id || '',
        name: resource.name || '',
        team: resource.team || '',
        home_location: resource.home_location || '',
        contract_type: resource.contract_type || 'day',
        weekly_hours: resource.weekly_hours || 40,
        resource_type: resource.resource_type || 'internal',
        cost_per_hour: resource.cost_per_hour || 30,
        qualifications: resource.qualifications || [],
        holidays: resource.holidays || []
      });
    } else {
      // Reset form for new resource
      setFormData({
        id: '',
        name: '',
        team: '',
        home_location: '',
        contract_type: 'day',
        weekly_hours: 40,
        resource_type: 'internal',
        cost_per_hour: 30,
        qualifications: [],
        holidays: []
      });
    }
    setErrors({});
  }, [resource, isOpen]);

  const fetchLocations = async () => {
    try {
      const response = await getLocations();
      setLocations(response.data.data);
    } catch (error) {
      console.error('Failed to fetch locations:', error);
    }
  };

  const validate = () => {
    const newErrors = {};

    if (!formData.id.trim()) newErrors.id = 'ID is required';
    if (!formData.name.trim()) newErrors.name = 'Name is required';
    if (!formData.team.trim()) newErrors.team = 'Team is required';
    if (!formData.home_location) newErrors.home_location = 'Home location is required';
    if (formData.weekly_hours < 1 || formData.weekly_hours > 60) {
      newErrors.weekly_hours = 'Weekly hours must be between 1 and 60';
    }
    if (formData.cost_per_hour < 0) {
      newErrors.cost_per_hour = 'Cost per hour must be positive';
    }
    if (formData.qualifications.length === 0) {
      newErrors.qualifications = 'At least one qualification is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validate()) return;

    setLoading(true);
    try {
      if (resource) {
        await updateResource(resource.id, formData);
      } else {
        await createResource(formData);
      }
      onSave();
      onClose();
    } catch (error) {
      console.error('Failed to save resource:', error);
      setErrors({ submit: error.response?.data?.error || 'Failed to save resource' });
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const toggleQualification = (qual) => {
    setFormData(prev => ({
      ...prev,
      qualifications: prev.qualifications.includes(qual)
        ? prev.qualifications.filter(q => q !== qual)
        : [...prev.qualifications, qual]
    }));
    if (errors.qualifications) {
      setErrors(prev => ({ ...prev, qualifications: undefined }));
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={resource ? 'Edit Resource' : 'Add Resource'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Basic Info */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Resource ID *
            </label>
            <input
              type="text"
              value={formData.id}
              onChange={(e) => handleChange('id', e.target.value)}
              disabled={!!resource}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.id ? 'border-red-500' : 'border-gray-300'
              } ${resource ? 'bg-gray-100' : ''}`}
              placeholder="e.g., INT001"
            />
            {errors.id && <p className="text-red-500 text-xs mt-1">{errors.id}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Name *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.name ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="e.g., John Doe"
            />
            {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Team *
            </label>
            <input
              type="text"
              value={formData.team}
              onChange={(e) => handleChange('team', e.target.value)}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.team ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="e.g., Team Alpha"
            />
            {errors.team && <p className="text-red-500 text-xs mt-1">{errors.team}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Home Location *
            </label>
            <select
              value={formData.home_location}
              onChange={(e) => handleChange('home_location', e.target.value)}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.home_location ? 'border-red-500' : 'border-gray-300'
              }`}
            >
              <option value="">Select location...</option>
              {locations.map(loc => (
                <option key={loc.id} value={loc.name}>{loc.name}</option>
              ))}
            </select>
            {errors.home_location && <p className="text-red-500 text-xs mt-1">{errors.home_location}</p>}
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Resource Type *
            </label>
            <select
              value={formData.resource_type}
              onChange={(e) => handleChange('resource_type', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            >
              <option value="internal">Internal</option>
              <option value="external">External</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Contract Type *
            </label>
            <select
              value={formData.contract_type}
              onChange={(e) => handleChange('contract_type', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            >
              <option value="day">Day</option>
              <option value="mixed">Mixed</option>
            </select>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Weekly Hours *
            </label>
            <input
              type="number"
              value={formData.weekly_hours}
              onChange={(e) => handleChange('weekly_hours', parseInt(e.target.value))}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.weekly_hours ? 'border-red-500' : 'border-gray-300'
              }`}
              min="1"
              max="60"
            />
            {errors.weekly_hours && <p className="text-red-500 text-xs mt-1">{errors.weekly_hours}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Cost per Hour (CHF) *
            </label>
            <input
              type="number"
              step="0.01"
              value={formData.cost_per_hour}
              onChange={(e) => handleChange('cost_per_hour', parseFloat(e.target.value))}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.cost_per_hour ? 'border-red-500' : 'border-gray-300'
              }`}
              min="0"
            />
            {errors.cost_per_hour && <p className="text-red-500 text-xs mt-1">{errors.cost_per_hour}</p>}
          </div>
        </div>

        {/* Qualifications */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Qualifications * (Select at least one)
          </label>
          <div className="grid grid-cols-2 gap-2">
            {QUALIFICATIONS.map(qual => (
              <label key={qual} className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={formData.qualifications.includes(qual)}
                  onChange={() => toggleQualification(qual)}
                  className="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                />
                <span className="text-sm text-gray-700 capitalize">{qual.replace('_', ' ')}</span>
              </label>
            ))}
          </div>
          {errors.qualifications && <p className="text-red-500 text-xs mt-1">{errors.qualifications}</p>}
        </div>

        {/* Error Message */}
        {errors.submit && (
          <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
            {errors.submit}
          </div>
        )}

        {/* Actions */}
        <div className="flex items-center justify-end space-x-3 pt-4 border-t border-gray-200">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Saving...' : resource ? 'Update Resource' : 'Create Resource'}
          </button>
        </div>
      </form>
    </Modal>
  );
}
