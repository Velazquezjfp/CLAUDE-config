"""
Locations API routes.
Endpoints for managing locations and distance matrix.
"""
from flask import Blueprint, jsonify, request, current_app

bp = Blueprint('locations', __name__)


@bp.route('', methods=['GET'])
def get_locations():
    """Get all locations."""
    db = current_app.config['DB']

    try:
        locations = db.get_all_locations()
        return jsonify({
            'success': True,
            'count': len(locations),
            'data': locations
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


@bp.route('/distances', methods=['GET'])
def get_distance_matrix():
    """Get complete distance matrix."""
    db = current_app.config['DB']

    try:
        matrix = db.get_distance_matrix()
        locations = db.get_all_locations()

        return jsonify({
            'success': True,
            'data': {
                'locations': [loc['name'] for loc in locations],
                'matrix': matrix
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


@bp.route('/distances', methods=['PUT'])
def update_distance():
    """Update distance between two locations."""
    db = current_app.config['DB']
    data = request.get_json()

    # Validate required fields
    if 'from_location' not in data or 'to_location' not in data or 'distance_km' not in data:
        return jsonify({'success': False, 'error': 'Missing required fields'}), 400

    try:
        db.update_distance(data['from_location'], data['to_location'], data['distance_km'])
        return jsonify({
            'success': True,
            'message': 'Distance updated successfully'
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500
