#!/usr/bin/env python3
"""
Process Excel files to extract qualifications and categories.
Generates a JSON file with deduplicated qualifications per category.
"""

import pandas as pd
import json
from pathlib import Path
from collections import defaultdict

def process_excel_file(file_path):
    """
    Process a single Excel file and extract categories and qualifications.

    Args:
        file_path: Path to the Excel file

    Returns:
        dict: Dictionary mapping categories to lists of qualifications
    """
    print(f"Processing: {file_path}")

    try:
        # Read Excel file without assuming any table structure
        df = pd.read_excel(file_path, header=0)

        # Display column names for debugging
        print(f"  Columns found: {list(df.columns)}")

        # Find the columns we need
        category_col = None
        qualification_col = None

        # First try exact matches
        for col in df.columns:
            if col == 'Catégorie de ressources':
                category_col = col
            elif col == 'Compétences requises':
                qualification_col = col

        # If not found, try partial matches but prioritize "Catégorie de ressources" over "Groupe de catégorie"
        if not category_col:
            for col in df.columns:
                col_str = str(col)
                if col_str == 'Catégorie de ressources':
                    category_col = col
                    break
            if not category_col:
                for col in df.columns:
                    col_lower = str(col).lower()
                    if 'catégorie' in col_lower and 'ressource' in col_lower and 'groupe' not in col_lower:
                        category_col = col
                        break

        if not qualification_col:
            for col in df.columns:
                col_lower = str(col).lower()
                if 'compétence' in col_lower and 'requise' in col_lower:
                    qualification_col = col
                    break

        if not category_col or not qualification_col:
            print(f"  Warning: Required columns not found")
            print(f"  Category column: {category_col}")
            print(f"  Qualification column: {qualification_col}")
            return {}

        print(f"  Using columns: '{category_col}' and '{qualification_col}'")

        # Create dictionary to store results
        result = defaultdict(set)

        # Process each row
        for idx, row in df.iterrows():
            category = row[category_col]
            qualifications = row[qualification_col]

            # Skip if category or qualifications are empty/NaN
            if pd.isna(category) or pd.isna(qualifications):
                continue

            category = str(category).strip()
            qualifications_str = str(qualifications).strip()

            # Skip empty values
            if not category or not qualifications_str:
                continue

            # Split qualifications by comma and process each one
            for qual in qualifications_str.split(','):
                qual = qual.strip()
                if qual:  # Only add non-empty qualifications
                    result[category].add(qual)

        print(f"  Found {len(result)} categories with qualifications")
        return result

    except Exception as e:
        print(f"  Error processing file: {e}")
        return {}

def merge_qualifications(results_list):
    """
    Merge multiple qualification dictionaries and deduplicate.

    Args:
        results_list: List of dictionaries mapping categories to sets of qualifications

    Returns:
        dict: Merged and deduplicated dictionary
    """
    merged = defaultdict(set)

    for result in results_list:
        for category, qualifications in result.items():
            merged[category].update(qualifications)

    return merged

def main():
    # Define file paths
    base_dir = Path(__file__).parent.parent.parent

    excel_files = [
        base_dir / "Export tour à couvrir au 31.12.2025 n°2.xlsx",
        base_dir / "Export tour à couvrir au 31.12.2025.xlsx"
    ]

    print("Starting qualification extraction...\n")

    # Process each Excel file
    results = []
    for file_path in excel_files:
        if file_path.exists():
            result = process_excel_file(file_path)
            results.append(result)
        else:
            print(f"Warning: File not found - {file_path}")

    # Merge and deduplicate
    print("\nMerging and deduplicating results...")
    merged_data = merge_qualifications(results)

    # Convert sets to sorted lists for JSON serialization
    final_data = {
        category: sorted(list(qualifications))
        for category, qualifications in sorted(merged_data.items())
    }

    print(f"Total categories: {len(final_data)}")
    total_qualifications = sum(len(quals) for quals in final_data.values())
    print(f"Total unique qualifications: {total_qualifications}")

    # Save to JSON
    output_path = base_dir / "utility" / "qualifications.json"
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(final_data, f, ensure_ascii=False, indent=2)

    print(f"\nJSON file created: {output_path}")

    # Print summary
    print("\nSummary by category:")
    for category, qualifications in sorted(final_data.items()):
        print(f"  {category}: {len(qualifications)} qualifications")

if __name__ == "__main__":
    main()
