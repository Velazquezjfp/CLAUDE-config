# CFF Maintenance Crew Scheduling System

An automated scheduling system for Swiss Federal Railways (CFF) maintenance crews using Integer Programming with Google OR-Tools.

## Problem Overview

This system solves the daily maintenance crew scheduling problem by:
- Matching workers to maintenance requests based on skills and availability
- Enforcing Swiss Labor Law (LDT) constraints
- Minimizing travel distance
- Diagnosing resource gaps when no solution exists

## Architecture

### Modules

1. **data_models.py** - Data structures and JSON parsing
   - `Resource`: Worker with skills, team, location, contract type, holidays
   - `Request`: Maintenance job with location, time, duration, required skills
   - `ProblemData`: Container for all problem data

2. **helpers.py** - Utility functions
   - Travel time calculations
   - Time window computations
   - Overlap detection
   - Work hour calculations

3. **solver.py** - CP-SAT solver implementation
   - Decision variables: binary x[resource, request]
   - Hard constraints: qualifications, availability, overlaps, legal limits
   - Objective: minimize travel distance

4. **infeasibility_analyzer.py** - Diagnostic system
   - Identifies qualification gaps
   - Detects capacity shortfalls
   - Analyzes geographic coverage
   - Checks contract type mismatches
   - Generates actionable recommendations

5. **output_formatter.py** - Result formatting
   - Schedule by resource (worker view)
   - Schedule by request (job view)
   - Daily summary
   - Team utilization statistics

6. **main.py** - Main program

## Decision Variables

**x[r, req]** - Binary variable (0 or 1)
- 1 if resource `r` is assigned to request `req`
- 0 otherwise
- Total variables: |resources| × |requests|

## Constraints

### Hard Constraints (Must be satisfied)

1. **Request Fulfillment**: Each request must have exactly `people_needed` workers
   ```
   Σ(r) x[r, req] = req.people_needed  ∀ req
   ```

2. **Qualification Matching**: Workers must have all required skills
   ```
   x[r, req] = 1 → r.qualifications ⊇ req.required_qualifications
   ```

3. **Availability**: Workers cannot work during holidays
   ```
   x[r, req] = 0  if req.date ∈ r.holidays
   ```

4. **Non-Overlap**: Workers cannot be assigned to overlapping requests
   ```
   x[r, req1] + x[r, req2] ≤ 1  if req1 and req2 overlap (with travel time)
   ```

5. **Daily Hour Limits**: Max 10 hours work per day (including travel)
   ```
   Σ(req on day) [x[r, req] × (req.duration + travel)] ≤ 10h  ∀ r, day
   ```

6. **Weekly Hour Limits**: Max 50 hours work per week
   ```
   Σ(req in week) [x[r, req] × (req.duration + travel)] ≤ 50h  ∀ r
   ```

7. **Rest Periods**: Min 11 hours between work periods
   ```
   end_time(day n) + 11h ≤ start_time(day n+1)
   ```

8. **Mandatory Breaks**: 30-minute break if work > 5 hours

9. **Night Shifts**: Only "mixed" contract workers can work 23:00-06:00

10. **Max Consecutive Workdays**: At most 6 consecutive days

### Objective Function

**Primary**: Find any feasible solution (feasibility check)

**Secondary**: Minimize total travel distance
```
Minimize: Σ(r, req) x[r, req] × distance(r.home, req.location)
```

## Usage

### Basic Usage

```bash
python main.py
```

This runs with default settings:
- Input: `mock_data.json`
- Output: `solution.json`
- Time limit: 300 seconds

### Advanced Usage

```bash
python main.py --input data.json --output result.json --time-limit 600
```

### Run Diagnostic Analysis

```bash
python main.py --diagnose
```

Forces infeasibility analysis even when solution is found.

## Input Format

JSON file with the following structure:

```json
{
  "resources": [
    {
      "id": "R001",
      "name": "Hans Müller",
      "team": "blue",
      "home_location": "Bern",
      "qualifications": ["track_maintenance", "safety_officer"],
      "contract_type": "day",
      "weekly_hours": 42,
      "holidays": [{"start": "2026-02-09", "end": "2026-02-13"}]
    }
  ],
  "requests": [
    {
      "id": "REQ001",
      "location": "Interlaken",
      "start_date": "2026-02-09",
      "start_time": "08:00",
      "duration_hours": 8,
      "required_qualifications": ["track_maintenance", "safety_officer"],
      "people_needed": 3,
      "description": "Track inspection"
    }
  ],
  "distance_matrix": {
    "locations": ["Bern", "Lausanne", "Zurich", ...],
    "matrix": [[0, 95, 120, ...], ...]
  },
  "legal_constraints": {
    "max_daily_hours": 10,
    "max_weekly_hours": 50,
    "min_daily_rest_hours": 11,
    ...
  }
}
```

## Output Format

### Solution File (solution.json)

```json
{
  "metadata": {
    "planning_period": {"start": "2026-02-09", "end": "2026-02-14"},
    "statistics": {
      "objective_value": 1234.56,
      "solve_time": 12.34
    }
  },
  "schedule_by_resource": { ... },
  "schedule_by_request": { ... },
  "daily_summary": { ... },
  "team_utilization": { ... }
}
```

### Diagnosis File (solution_diagnosis.json)

When no solution exists, contains:
- Qualification gaps
- Capacity shortfalls
- Geographic gaps
- Temporal conflicts
- Contract type issues
- Actionable recommendations

## Infeasibility Diagnosis

When the solver cannot find a solution, the system analyzes:

1. **Qualification Gaps**: Missing skills for specific requests
2. **Capacity Shortfalls**: Not enough workers for peak periods
3. **Geographic Gaps**: Remote locations lacking nearby workers
4. **Temporal Conflicts**: Overlapping requests with insufficient resources
5. **Contract Type Issues**: Night shifts without mixed-contract workers

The system generates specific recommendations like:
- "Hire 2 more workers with welding and track_maintenance skills"
- "Establish team near Bellinzona location"
- "Convert 3 workers to mixed contracts for night shift coverage"

## Requirements

```
ortools>=9.0
python>=3.8
```

Install dependencies:
```bash
pip install ortools
```

## Example Run

```bash
$ python main.py

Initializing OR-Tools...
OR-Tools version: 9.x.x

Loading data from: mock_data.json
✓ Data loaded successfully
  - 20 resources
  - 10 requests
  - Planning period: 2026-02-09 to 2026-02-14

============================================================
CFF MAINTENANCE CREW SCHEDULING
============================================================
Resources: 20
Requests: 10
Planning period: 2026-02-09 to 2026-02-14
============================================================

Creating decision variables...
Created 200 assignment variables
Adding request fulfillment constraints...
Added 10 request fulfillment constraints
...

Solving with time limit: 300s...
✓ Optimal solution found!

Solution exported to: solution.json
```

## Key Design Decisions

1. **CP-SAT Solver**: Used instead of MIP for better handling of complex constraints
2. **Scaled Integers**: Hours scaled by 100 to avoid floating-point variables
3. **Auxiliary Variables**: Track daily work and hours for constraint enforcement
4. **Modular Design**: Separation of concerns for maintainability
5. **Comprehensive Diagnosis**: Actionable insights when infeasible

## Limitations and Future Enhancements

### Current Limitations
- Single planning period (treats as one week)
- Fixed travel speed (80 km/h)
- No multi-day requests
- No resource preferences or seniority

### Potential Enhancements
- Support for multi-week planning
- Team cohesion optimization
- Cost modeling (internal vs contractor)
- Historical data integration
- What-if scenario analysis
- Interactive constraint relaxation

## References

- [Google OR-Tools Documentation](https://developers.google.com/optimization)
- [Integer Programming (Wikipedia)](https://en.wikipedia.org/wiki/Integer_programming)
- Swiss Labor Law (LDT) - Federal regulations for working hours

## License

Internal CFF project - Proprietary
