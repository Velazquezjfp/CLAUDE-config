import { useState, useEffect } from 'react';
import { createRequest, updateRequest, getLocations } from '../services/api';
import Modal from './Modal';

const QUALIFICATIONS = [
  'electrical',
  'mechanical',
  'hydraulic',
  'electronic',
  'signaling',
  'track_work',
  'overhead_lines',
  'safety_systems'
];

export default function RequestForm({ isOpen, onClose, onSave, request }) {
  const [locations, setLocations] = useState([]);
  const [formData, setFormData] = useState({
    id: '',
    location: '',
    date: '',
    earliest_start: '08:00',
    latest_start: '10:00',
    duration_hours: 4,
    workers_needed: 1,
    qualifications: []
  });
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchLocations();
  }, []);

  useEffect(() => {
    if (request) {
      setFormData({
        id: request.id || '',
        location: request.location || '',
        date: request.date || '',
        earliest_start: request.earliest_start || '08:00',
        latest_start: request.latest_start || '10:00',
        duration_hours: request.duration_hours || 4,
        workers_needed: request.workers_needed || 1,
        qualifications: request.qualifications || []
      });
    } else {
      // Reset form for new request
      const today = new Date().toISOString().split('T')[0];
      setFormData({
        id: '',
        location: '',
        date: today,
        earliest_start: '08:00',
        latest_start: '10:00',
        duration_hours: 4,
        workers_needed: 1,
        qualifications: []
      });
    }
    setErrors({});
  }, [request, isOpen]);

  const fetchLocations = async () => {
    try {
      const response = await getLocations();
      setLocations(response.data.data);
    } catch (error) {
      console.error('Failed to fetch locations:', error);
    }
  };

  const validate = () => {
    const newErrors = {};

    if (!formData.id.trim()) newErrors.id = 'ID is required';
    if (!formData.location) newErrors.location = 'Location is required';
    if (!formData.date) newErrors.date = 'Date is required';
    if (!formData.earliest_start) newErrors.earliest_start = 'Earliest start is required';
    if (!formData.latest_start) newErrors.latest_start = 'Latest start is required';
    if (formData.earliest_start >= formData.latest_start) {
      newErrors.latest_start = 'Latest start must be after earliest start';
    }
    if (formData.duration_hours < 1 || formData.duration_hours > 12) {
      newErrors.duration_hours = 'Duration must be between 1 and 12 hours';
    }
    if (formData.workers_needed < 1 || formData.workers_needed > 10) {
      newErrors.workers_needed = 'Workers needed must be between 1 and 10';
    }
    if (formData.qualifications.length === 0) {
      newErrors.qualifications = 'At least one qualification is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validate()) return;

    setLoading(true);
    try {
      if (request) {
        await updateRequest(request.id, formData);
      } else {
        await createRequest(formData);
      }
      onSave();
      onClose();
    } catch (error) {
      console.error('Failed to save request:', error);
      setErrors({ submit: error.response?.data?.error || 'Failed to save request' });
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const toggleQualification = (qual) => {
    setFormData(prev => ({
      ...prev,
      qualifications: prev.qualifications.includes(qual)
        ? prev.qualifications.filter(q => q !== qual)
        : [...prev.qualifications, qual]
    }));
    if (errors.qualifications) {
      setErrors(prev => ({ ...prev, qualifications: undefined }));
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={request ? 'Edit Request' : 'Add Request'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Basic Info */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Request ID *
            </label>
            <input
              type="text"
              value={formData.id}
              onChange={(e) => handleChange('id', e.target.value)}
              disabled={!!request}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.id ? 'border-red-500' : 'border-gray-300'
              } ${request ? 'bg-gray-100' : ''}`}
              placeholder="e.g., REQ001"
            />
            {errors.id && <p className="text-red-500 text-xs mt-1">{errors.id}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Location *
            </label>
            <select
              value={formData.location}
              onChange={(e) => handleChange('location', e.target.value)}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.location ? 'border-red-500' : 'border-gray-300'
              }`}
            >
              <option value="">Select location...</option>
              {locations.map(loc => (
                <option key={loc.id} value={loc.id}>{loc.name}</option>
              ))}
            </select>
            {errors.location && <p className="text-red-500 text-xs mt-1">{errors.location}</p>}
          </div>
        </div>

        <div className="grid grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Date *
            </label>
            <input
              type="date"
              value={formData.date}
              onChange={(e) => handleChange('date', e.target.value)}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.date ? 'border-red-500' : 'border-gray-300'
              }`}
            />
            {errors.date && <p className="text-red-500 text-xs mt-1">{errors.date}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Earliest Start *
            </label>
            <input
              type="time"
              value={formData.earliest_start}
              onChange={(e) => handleChange('earliest_start', e.target.value)}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.earliest_start ? 'border-red-500' : 'border-gray-300'
              }`}
            />
            {errors.earliest_start && <p className="text-red-500 text-xs mt-1">{errors.earliest_start}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Latest Start *
            </label>
            <input
              type="time"
              value={formData.latest_start}
              onChange={(e) => handleChange('latest_start', e.target.value)}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.latest_start ? 'border-red-500' : 'border-gray-300'
              }`}
            />
            {errors.latest_start && <p className="text-red-500 text-xs mt-1">{errors.latest_start}</p>}
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Duration (hours) *
            </label>
            <input
              type="number"
              step="0.5"
              value={formData.duration_hours}
              onChange={(e) => handleChange('duration_hours', parseFloat(e.target.value))}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.duration_hours ? 'border-red-500' : 'border-gray-300'
              }`}
              min="1"
              max="12"
            />
            {errors.duration_hours && <p className="text-red-500 text-xs mt-1">{errors.duration_hours}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Workers Needed *
            </label>
            <input
              type="number"
              value={formData.workers_needed}
              onChange={(e) => handleChange('workers_needed', parseInt(e.target.value))}
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${
                errors.workers_needed ? 'border-red-500' : 'border-gray-300'
              }`}
              min="1"
              max="10"
            />
            {errors.workers_needed && <p className="text-red-500 text-xs mt-1">{errors.workers_needed}</p>}
          </div>
        </div>

        {/* Qualifications */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Required Qualifications * (Select at least one)
          </label>
          <div className="grid grid-cols-2 gap-2">
            {QUALIFICATIONS.map(qual => (
              <label key={qual} className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={formData.qualifications.includes(qual)}
                  onChange={() => toggleQualification(qual)}
                  className="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                />
                <span className="text-sm text-gray-700 capitalize">{qual.replace('_', ' ')}</span>
              </label>
            ))}
          </div>
          {errors.qualifications && <p className="text-red-500 text-xs mt-1">{errors.qualifications}</p>}
        </div>

        {/* Error Message */}
        {errors.submit && (
          <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
            {errors.submit}
          </div>
        )}

        {/* Actions */}
        <div className="flex items-center justify-end space-x-3 pt-4 border-t border-gray-200">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Saving...' : request ? 'Update Request' : 'Create Request'}
          </button>
        </div>
      </form>
    </Modal>
  );
}
