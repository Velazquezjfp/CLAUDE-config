"""
Solver API routes.
Endpoints for running the scheduler solver.
"""
from flask import Blueprint, jsonify, request, current_app
from datetime import datetime
import sys
from pathlib import Path

# Add parent directory for imports
sys.path.append(str(Path(__file__).parent.parent.parent))

from api.solver_service import SolverService

bp = Blueprint('solver', __name__)


@bp.route('/run', methods=['POST'])
def run_solver():
    """
    Run the solver with given configuration.

    Request body:
    {
        "name": "Plan name",
        "objective_type": "travel|cost|both",
        "time_limit_seconds": 300,
        "max_travel_minutes": null,
        "team_cohesion_min": null
    }
    """
    db = current_app.config['DB']
    data = request.get_json()

    # Generate plan ID
    plan_id = f"plan_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

    # Create plan record
    # Support both 'objective' and 'objective_type' for backwards compatibility
    objective = data.get('objective') or data.get('objective_type', 'travel')
    # Support both 'max_travel_time_minutes' and 'max_travel_minutes'
    max_travel = data.get('max_travel_time_minutes') or data.get('max_travel_minutes')
    # Support both 'team_cohesion_percentage' and 'team_cohesion_min'
    team_cohesion = data.get('team_cohesion_percentage') or data.get('team_cohesion_min')

    plan_data = {
        'id': plan_id,
        'name': data.get('name', f'Plan {plan_id}'),
        'objective_type': objective,
        'max_travel_minutes': max_travel,
        'team_cohesion_min': team_cohesion,
        'time_limit_seconds': data.get('time_limit_seconds', 300)
    }

    try:
        # Create plan in database
        db.create_plan(plan_data)

        # Run solver
        solver_service = SolverService(db)
        results = solver_service.run_solver(plan_data)

        # Update plan with results
        db.update_plan_results(plan_id, results)

        return jsonify({
            'success': True,
            'message': 'Solver completed successfully',
            'data': {
                'plan_id': plan_id,
                'feasible': results['feasible'],
                'solve_time': results['solve_time'],
                'objective_value': results['objective_value']
            }
        })

    except Exception as e:
        # Update plan with error
        try:
            db.update_plan_results(plan_id, {
                'status': 'failed',
                'feasible': False,
                'error_message': str(e),
                'assignments': [],
                'kpis': {}
            })
        except:
            pass

        return jsonify({
            'success': False,
            'error': f'Solver error: {str(e)}',
            'data': {'plan_id': plan_id}
        }), 500
