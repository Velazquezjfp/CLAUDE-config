#!/usr/bin/env python3
"""
Test script to simulate clicking "Run Solver" button.
This replicates the exact flow: API -> SolverService -> Solver -> Database
"""
import sys
from pathlib import Path

# Add parent directory to path
parent_dir = Path(__file__).parent.parent
sys.path.append(str(parent_dir))
sys.path.append(str(parent_dir / 'api'))

from solver_service import SolverService
from database.db_manager import DatabaseManager
from datetime import datetime


def test_run_solver():
    """Simulate the exact flow when user clicks Run Solver button."""

    print("=" * 70)
    print("SIMULATING: User clicks 'Run Solver' button")
    print("=" * 70)
    print()

    # Step 1: Initialize database and solver service
    print("Step 1: Initialize database and solver service...")
    try:
        db = DatabaseManager()
        solver_service = SolverService(db)
        print("✅ Database and solver service initialized")
    except Exception as e:
        print(f"❌ Initialization failed: {e}")
        import traceback
        traceback.print_exc()
        return

    print()

    # Step 2: Prepare plan configuration (from UI form)
    print("Step 2: Prepare plan configuration from UI form...")
    plan_config = {
        'name': 'Test Plan - ' + datetime.now().strftime('%Y%m%d_%H%M%S'),
        'objective': 'both',
        'time_limit_seconds': 300,
        'max_travel_time_minutes': 120,
        'team_cohesion_percentage': 70
    }
    print(f"✅ Plan configuration:")
    for key, value in plan_config.items():
        print(f"   - {key}: {value}")

    print()

    # Step 3: Create plan in database
    print("Step 3: Create plan record in database...")
    plan_id = f"plan_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    try:
        db.create_plan({
            'id': plan_id,
            'name': plan_config['name'],
            'status': 'running',
            'objective': plan_config['objective'],
            'time_limit_seconds': plan_config['time_limit_seconds'],
            'max_travel_time_minutes': plan_config['max_travel_time_minutes'],
            'team_cohesion_percentage': plan_config['team_cohesion_percentage']
        })
        print(f"✅ Plan created with ID: {plan_id}")
    except Exception as e:
        print(f"❌ Plan creation failed: {e}")
        import traceback
        traceback.print_exc()
        return

    print()

    # Step 4: Load problem data from database
    print("Step 4: Load problem data from database...")
    try:
        problem_data = solver_service.load_problem_from_db()
        print(f"✅ Problem data loaded:")
        print(f"   - Resources: {len(problem_data.resources)}")
        print(f"   - Requests: {len(problem_data.requests)}")
        print(f"   - Planning period: {problem_data.planning_start} to {problem_data.planning_end}")
        print(f"   - Distance matrix locations: {len(problem_data.distance_matrix.locations)}")
    except Exception as e:
        print(f"❌ Problem data loading failed: {e}")
        import traceback
        traceback.print_exc()
        # Update plan status to failed
        try:
            db.update_plan_results(plan_id, {
                'status': 'failed',
                'feasible': False,
                'error_message': str(e)
            })
        except:
            pass
        return

    print()

    # Step 5: Run the solver
    print("Step 5: Run the solver (this may take a few minutes)...")
    print(f"Time limit: {plan_config['time_limit_seconds']} seconds")
    try:
        results = solver_service.run_solver(plan_config)
        print(f"✅ Solver completed!")
        print(f"   - Status: {results['status']}")
        print(f"   - Feasible: {results['feasible']}")
        if results['feasible']:
            print(f"   - Solve time: {results['solve_time']:.2f}s")
            print(f"   - Objective value: {results['objective_value']}")
            print(f"   - Assignments: {len(results['assignments'])}")
            print(f"   - KPIs calculated: {len(results['kpis'])}")
        else:
            print(f"   - Error: {results['error_message']}")
    except Exception as e:
        print(f"❌ Solver execution failed: {e}")
        import traceback
        traceback.print_exc()
        # Update plan status to failed
        try:
            db.update_plan_results(plan_id, {
                'status': 'failed',
                'feasible': False,
                'error_message': str(e)
            })
        except:
            pass
        return

    print()

    # Step 6: Update plan with results
    print("Step 6: Update plan with results in database...")
    try:
        db.update_plan_results(plan_id, results)
        print(f"✅ Plan results saved to database")
    except Exception as e:
        print(f"❌ Failed to save results: {e}")
        import traceback
        traceback.print_exc()
        return

    print()
    print("=" * 70)
    print("SIMULATION COMPLETE!")
    print("=" * 70)
    print()

    if results['feasible']:
        print("✅ SUCCESS: Solver found a feasible solution")
        print(f"Plan ID: {plan_id}")
        print(f"You can now view this plan in the UI at: /plans/{plan_id}")
    else:
        print("⚠️  INFEASIBLE: Solver could not find a solution")
        print(f"Reason: {results['error_message']}")


if __name__ == '__main__':
    test_run_solver()
