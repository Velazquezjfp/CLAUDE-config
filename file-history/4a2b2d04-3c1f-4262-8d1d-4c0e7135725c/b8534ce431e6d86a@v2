import { useState, useEffect } from 'react';
import { getLocations, getDistanceMatrix } from '../services/api';
import { MapPin } from 'lucide-react';

export default function LocationsPage() {
  const [locations, setLocations] = useState([]);
  const [distanceMatrix, setDistanceMatrix] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [locResponse, distResponse] = await Promise.all([
        getLocations(),
        getDistanceMatrix()
      ]);
      setLocations(locResponse.data.data);
      setDistanceMatrix(distResponse.data.data.matrix);
    } catch (error) {
      console.error('Failed to fetch data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getDistance = (fromName, toName) => {
    return distanceMatrix[fromName]?.[toName] || '-';
  };

  const getTravelTime = (fromName, toName) => {
    const distance = distanceMatrix[fromName]?.[toName];
    if (!distance || distance === '-') return '-';
    // Assume 80 km/h average speed
    return Math.round((distance / 80) * 60);
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow p-8 text-center text-gray-500">
        Loading locations...
      </div>
    );
  }

  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Locations & Distance Matrix</h2>
          <p className="text-sm text-gray-600 mt-1">
            View all locations and distances between sites
          </p>
        </div>
      </div>

      {/* Locations List */}
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Locations ({locations.length})</h3>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-3 gap-4">
            {locations.map(location => (
              <div
                key={location.id}
                className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg border border-gray-200"
              >
                <MapPin className="h-5 w-5 text-primary-600" />
                <div>
                  <div className="font-medium text-gray-900">{location.name}</div>
                  <div className="text-xs text-gray-500">{location.id}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Distance Matrix */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Distance Matrix</h3>
          <p className="text-sm text-gray-600 mt-1">
            Distances in kilometers / Travel time in minutes
          </p>
        </div>
        <div className="p-6 overflow-x-auto">
          <table className="min-w-full">
            <thead>
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider bg-gray-50 sticky left-0">
                  From \ To
                </th>
                {locations.map(loc => (
                  <th
                    key={loc.id}
                    className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider bg-gray-50"
                  >
                    {loc.name}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {locations.map(fromLoc => (
                <tr key={fromLoc.id}>
                  <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 bg-gray-50 sticky left-0">
                    {fromLoc.name}
                  </td>
                  {locations.map(toLoc => {
                    const distance = getDistance(fromLoc.name, toLoc.name);
                    const time = getTravelTime(fromLoc.name, toLoc.name);
                    const isSame = fromLoc.name === toLoc.name;

                    return (
                      <td
                        key={toLoc.id}
                        className={`px-4 py-3 text-center text-sm ${
                          isSame
                            ? 'bg-gray-100 text-gray-400'
                            : 'text-gray-900 hover:bg-gray-50'
                        }`}
                      >
                        {isSame ? (
                          <span>-</span>
                        ) : (
                          <div>
                            <div className="font-semibold">{distance} km</div>
                            <div className="text-xs text-gray-500">{time} min</div>
                          </div>
                        )}
                      </td>
                    );
                  })}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Info Box */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-semibold text-blue-900 mb-2">Distance Matrix Information</h4>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>• Distances are calculated between each pair of locations</li>
          <li>• Travel times include average traffic conditions</li>
          <li>• Matrix is used for optimizing resource travel assignments</li>
          <li>• Diagonal cells (same location) are empty as no travel is needed</li>
        </ul>
      </div>
    </div>
  );
}
