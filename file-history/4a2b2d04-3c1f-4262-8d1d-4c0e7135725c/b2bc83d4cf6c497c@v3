import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { runSolver } from '../services/api';
import { PlayCircle, Loader } from 'lucide-react';

export default function SolverPage() {
  const navigate = useNavigate();
  const [config, setConfig] = useState({
    name: '',
    objective: 'both',
    time_limit_seconds: 300
  });
  const [running, setRunning] = useState(false);
  const [error, setError] = useState(null);

  const handleChange = (field, value) => {
    setConfig(prev => ({ ...prev, [field]: value }));
    setError(null);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!config.name.trim()) {
      setError('Plan name is required');
      return;
    }

    setRunning(true);
    setError(null);

    try {
      const response = await runSolver(config);
      const planId = response.data.data.plan_id;
      const feasible = response.data.data.feasible;

      if (!feasible) {
        // Show warning but allow viewing details
        setError(
          <div>
            <div className="font-semibold mb-2">No feasible solution found</div>
            <div className="text-sm">The solver could not find a way to satisfy all constraints and requirements. This usually means:</div>
            <ul className="text-sm list-disc list-inside mt-2 mb-3">
              <li>Not enough qualified resources available</li>
              <li>Constraints are too restrictive</li>
              <li>Requests have conflicting time requirements</li>
            </ul>
            <button
              onClick={() => navigate(`/plans/${planId}`)}
              className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
            >
              View Plan Details →
            </button>
          </div>
        );
      } else {
        // Success - redirect immediately
        navigate(`/plans/${planId}`);
      }
    } catch (err) {
      console.error('Failed to run solver:', err);
      setError(err.response?.data?.error || 'Failed to run solver. Please check the backend logs.');
    } finally {
      setRunning(false);
    }
  };

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Run Optimization Solver</h2>
        <p className="text-sm text-gray-600 mt-1">
          Configure and execute the resource allocation optimization
        </p>
      </div>

      <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow">
        <div className="p-6 space-y-6">
          {/* Plan Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Plan Name *
            </label>
            <input
              type="text"
              value={config.name}
              onChange={(e) => handleChange('name', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="e.g., Weekly Schedule - Jan 2025"
              disabled={running}
            />
            <p className="text-xs text-gray-500 mt-1">Give this plan a descriptive name</p>
          </div>

          {/* Objective */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Optimization Objective *
            </label>
            <div className="space-y-2">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  value="cost"
                  checked={config.objective === 'cost'}
                  onChange={(e) => handleChange('objective', e.target.value)}
                  className="text-primary-600 focus:ring-primary-500"
                  disabled={running}
                />
                <div>
                  <div className="font-medium text-gray-900">Minimize Cost</div>
                  <div className="text-sm text-gray-600">Prioritize using cheapest resources</div>
                </div>
              </label>

              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  value="travel"
                  checked={config.objective === 'travel'}
                  onChange={(e) => handleChange('objective', e.target.value)}
                  className="text-primary-600 focus:ring-primary-500"
                  disabled={running}
                />
                <div>
                  <div className="font-medium text-gray-900">Minimize Travel</div>
                  <div className="text-sm text-gray-600">Prioritize shortest distances and travel times</div>
                </div>
              </label>

              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  value="both"
                  checked={config.objective === 'both'}
                  onChange={(e) => handleChange('objective', e.target.value)}
                  className="text-primary-600 focus:ring-primary-500"
                  disabled={running}
                />
                <div>
                  <div className="font-medium text-gray-900">Balanced (Cost + Travel)</div>
                  <div className="text-sm text-gray-600">Optimize for both cost and travel distance</div>
                </div>
              </label>
            </div>
          </div>

          {/* Solver Settings */}
          <div className="border-t border-gray-200 pt-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Solver Settings</h3>

            <div className="max-w-md">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Time Limit (seconds)
                </label>
                <input
                  type="number"
                  value={config.time_limit_seconds}
                  onChange={(e) => handleChange('time_limit_seconds', parseInt(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  min="60"
                  max="3600"
                  disabled={running}
                />
                <p className="text-xs text-gray-500 mt-1">
                  Maximum solver execution time (60-3600s)
                </p>
              </div>
            </div>

            <div className="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-3">
              <p className="text-sm text-blue-800">
                <span className="font-medium">Note:</span> Constraint settings (travel time, team cohesion, work hours, etc.) are managed in the{' '}
                <a href="/constraints" className="underline font-medium hover:text-blue-900">
                  Constraints
                </a>
                {' '}page.
              </p>
            </div>
          </div>

          {/* Error Message */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
              {error}
            </div>
          )}

          {/* Running Status */}
          {running && (
            <div className="bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded-lg flex items-center space-x-3">
              <Loader className="h-5 w-5 animate-spin" />
              <div>
                <div className="font-medium">Solver is running...</div>
                <div className="text-sm">
                  This may take up to {Math.round(config.time_limit_seconds / 60)} minutes depending on problem complexity.
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Actions */}
        <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex items-center justify-between rounded-b-lg">
          <div className="text-sm text-gray-600">
            The solver will create assignments using constraints configured in the Constraints page.
          </div>
          <button
            type="submit"
            disabled={running}
            className="flex items-center space-x-2 px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium"
          >
            {running ? (
              <>
                <Loader className="h-5 w-5 animate-spin" />
                <span>Running Solver...</span>
              </>
            ) : (
              <>
                <PlayCircle className="h-5 w-5" />
                <span>Run Solver</span>
              </>
            )}
          </button>
        </div>
      </form>

      {/* Information Box */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-semibold text-blue-900 mb-2">How the Solver Works</h4>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>• Uses Google OR-Tools CP-SAT solver for constraint programming</li>
          <li>• Assigns resources to requests while respecting all Swiss Labor Law constraints</li>
          <li>• Considers qualifications, travel distances, and team preferences</li>
          <li>• Generates optimal schedule based on selected objective</li>
          <li>• Results are saved as a plan with full KPI metrics</li>
        </ul>
      </div>
    </div>
  );
}
