"""
Resources API routes.
Endpoints for managing internal and external resources (workers).
"""
from flask import Blueprint, jsonify, request, current_app

bp = Blueprint('resources', __name__)


@bp.route('', methods=['GET'])
def get_resources():
    """Get all resources, optionally filtered by type."""
    db = current_app.config['DB']
    resource_type = request.args.get('type')  # 'internal', 'external', or None for all

    try:
        resources = db.get_all_resources(resource_type)
        return jsonify({
            'success': True,
            'count': len(resources),
            'data': resources
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


@bp.route('/<resource_id>', methods=['GET'])
def get_resource(resource_id):
    """Get a single resource by ID."""
    db = current_app.config['DB']

    try:
        resource = db.get_resource(resource_id)
        if not resource:
            return jsonify({'success': False, 'error': 'Resource not found'}), 404

        return jsonify({
            'success': True,
            'data': resource
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


@bp.route('', methods=['POST'])
def create_resource():
    """Create a new resource."""
    db = current_app.config['DB']
    data = request.get_json()

    # Validate required fields
    required_fields = ['id', 'name', 'team', 'home_location', 'contract_type', 'weekly_hours']
    for field in required_fields:
        if field not in data:
            return jsonify({'success': False, 'error': f'Missing required field: {field}'}), 400

    try:
        resource_id = db.create_resource(data)
        return jsonify({
            'success': True,
            'message': 'Resource created successfully',
            'data': {'id': resource_id}
        }), 201
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


@bp.route('/<resource_id>', methods=['PUT'])
def update_resource(resource_id):
    """Update an existing resource."""
    db = current_app.config['DB']
    data = request.get_json()

    # Check if resource exists
    existing = db.get_resource(resource_id)
    if not existing:
        return jsonify({'success': False, 'error': 'Resource not found'}), 404

    try:
        db.update_resource(resource_id, data)
        return jsonify({
            'success': True,
            'message': 'Resource updated successfully',
            'data': {'id': resource_id}
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


@bp.route('/<resource_id>', methods=['DELETE'])
def delete_resource(resource_id):
    """Delete a resource."""
    db = current_app.config['DB']

    # Check if resource exists
    existing = db.get_resource(resource_id)
    if not existing:
        return jsonify({'success': False, 'error': 'Resource not found'}), 404

    try:
        db.delete_resource(resource_id)
        return jsonify({
            'success': True,
            'message': 'Resource deleted successfully'
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


@bp.route('/stats', methods=['GET'])
def get_resource_stats():
    """Get resource statistics."""
    db = current_app.config['DB']

    try:
        internal = db.get_all_resources('internal')
        external = db.get_all_resources('external')

        # Count by team
        teams = {}
        for resource in internal + external:
            team = resource['team']
            if team not in teams:
                teams[team] = {'internal': 0, 'external': 0, 'total': 0}

            if resource['resource_type'] == 'internal':
                teams[team]['internal'] += 1
            else:
                teams[team]['external'] += 1
            teams[team]['total'] += 1

        return jsonify({
            'success': True,
            'data': {
                'total': len(internal) + len(external),
                'internal': len(internal),
                'external': len(external),
                'by_team': teams
            }
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500
