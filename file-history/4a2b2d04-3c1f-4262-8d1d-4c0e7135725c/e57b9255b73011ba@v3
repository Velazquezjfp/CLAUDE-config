import { useState, useEffect } from 'react';
import { getStats, getResources, getRequests, getPlans } from '../services/api';
import { Users, ClipboardList, FolderOpen, DollarSign, MapPin, Clock } from 'lucide-react';

export default function DashboardPage() {
  const [stats, setStats] = useState(null);
  const [recentPlans, setRecentPlans] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [statsRes, plansRes] = await Promise.all([
        getStats(),
        getPlans()
      ]);
      setStats(statsRes.data.data);
      setRecentPlans(plansRes.data.data.slice(0, 5));
    } catch (error) {
      console.error('Failed to fetch dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow p-8 text-center text-gray-500">
        Loading dashboard...
      </div>
    );
  }

  const statCards = [
    {
      title: 'Total Resources',
      value: stats?.resources?.total || 0,
      icon: Users,
      color: 'bg-blue-500',
      detail: `${stats?.resources?.internal || 0} internal, ${stats?.resources?.external || 0} external`
    },
    {
      title: 'Work Requests',
      value: stats?.requests?.total || 0,
      icon: ClipboardList,
      color: 'bg-green-500'
    },
    {
      title: 'Saved Plans',
      value: stats?.plans?.total || 0,
      icon: FolderOpen,
      color: 'bg-purple-500',
      detail: `${stats?.plans?.feasible || 0} feasible solutions`
    }
  ];

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Dashboard</h2>
        <p className="text-sm text-gray-600 mt-1">
          Overview of your CFF Scheduler system
        </p>
      </div>

      {/* Stat Cards */}
      <div className="grid grid-cols-3 gap-6 mb-6">
        {statCards.map((card, index) => {
          const Icon = card.icon;
          return (
            <div key={index} className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-sm font-medium text-gray-600">{card.title}</h3>
                <div className={`${card.color} p-3 rounded-lg`}>
                  <Icon className="h-6 w-6 text-white" />
                </div>
              </div>
              <div className="text-3xl font-bold text-gray-900 mb-1">{card.value}</div>
              {card.detail && (
                <div className="text-sm text-gray-500">{card.detail}</div>
              )}
            </div>
          );
        })}
      </div>

      {/* Recent Plans */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Recent Plans</h3>
        </div>
        <div className="p-6">
          {recentPlans.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              No plans yet. Run the solver to create your first plan.
            </div>
          ) : (
            <div className="space-y-3">
              {recentPlans.map(plan => (
                <div
                  key={plan.id}
                  className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                >
                  <div className="flex items-center space-x-4">
                    <FolderOpen className="h-5 w-5 text-gray-400" />
                    <div>
                      <div className="font-medium text-gray-900">{plan.name}</div>
                      <div className="text-sm text-gray-500">
                        Created {new Date(plan.created_at).toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4">
                    <span
                      className={`px-3 py-1 rounded-full text-xs font-medium ${
                        plan.status === 'completed'
                          ? 'bg-green-100 text-green-800'
                          : plan.status === 'running'
                          ? 'bg-blue-100 text-blue-800'
                          : 'bg-red-100 text-red-800'
                      }`}
                    >
                      {plan.status}
                    </span>
                    <button className="text-primary-600 hover:text-primary-900 text-sm font-medium">
                      View Details
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="mt-6 grid grid-cols-2 gap-6">
        <div className="bg-gradient-to-br from-primary-500 to-primary-600 rounded-lg shadow p-6 text-white">
          <h3 className="text-lg font-semibold mb-2">Run New Optimization</h3>
          <p className="text-sm text-primary-100 mb-4">
            Create a new resource allocation plan with the solver
          </p>
          <button className="px-4 py-2 bg-white text-primary-600 rounded-lg hover:bg-primary-50 transition-colors font-medium">
            Go to Solver
          </button>
        </div>

        <div className="bg-gradient-to-br from-gray-700 to-gray-800 rounded-lg shadow p-6 text-white">
          <h3 className="text-lg font-semibold mb-2">Manage Data</h3>
          <p className="text-sm text-gray-300 mb-4">
            Add or edit resources, requests, and constraints
          </p>
          <div className="flex space-x-2">
            <button className="px-4 py-2 bg-white text-gray-800 rounded-lg hover:bg-gray-100 transition-colors text-sm font-medium">
              Resources
            </button>
            <button className="px-4 py-2 bg-white text-gray-800 rounded-lg hover:bg-gray-100 transition-colors text-sm font-medium">
              Requests
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
