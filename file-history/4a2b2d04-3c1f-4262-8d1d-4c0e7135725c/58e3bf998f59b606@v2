# CFF Scheduler - Quick Start Guide

Complete guide to run the CFF Scheduler application with UI.

## Prerequisites

- Python 3.8+
- Node.js 18+
- SQLite (included with Python)

## Step 1: Database Setup (First Time Only)

```bash
cd /home/javiervel/clients/CFF/algo-test/Use_case_1

# Run migration to create database and import data
python database/migrations.py
```

**Expected Output:**
```
============================================================
CFF SCHEDULER - DATA MIGRATION
============================================================
✓ Imported 11 locations
✓ Imported 121 distance entries
✓ Imported 20 internal resources
✓ Imported 45 external resources
✓ Imported 10 requests
✓ Updated legal constraints

Database file: database/cff_scheduler.db
```

## Step 2: Start Backend API

```bash
# Install Python dependencies (first time only)
pip install Flask==3.0.0 Flask-CORS==4.0.0 python-dotenv==1.0.0

# Start Flask server
python api/app.py
```

**Backend will run at:** `http://localhost:5000`

**Test API:**
```bash
curl http://localhost:5000/api/health
# Should return: {"status": "healthy", "timestamp": "..."}
```

## Step 3: Start Frontend UI

Open a **new terminal:**

```bash
cd /home/javiervel/clients/CFF/algo-test/Use_case_1/frontend

# Install Node dependencies (first time only)
npm install

# Start Vite dev server
npm run dev
```

**Frontend will run at:** `http://localhost:5173`

## Step 4: Open Application

Open your browser and navigate to:

**http://localhost:5173**

You should see:
- Header with CFF Scheduler logo and statistics
- Sidebar with navigation menu
- Dashboard page

## Application Overview

### Navigation Menu

1. **Dashboard** - Overview and KPIs (placeholder)
2. **Resources** - View/Edit internal and external workers
3. **Requests** - View/Edit work requests
4. **Constraints** - Legal constraints (placeholder)
5. **Locations** - Sites and distance matrix (placeholder)
6. **Solver** - Run optimization (placeholder)
7. **Plans** - Saved plans (placeholder)

### Functional Pages (Ready to Use)

#### Resources Page (`/resources`)
- **Filter** by All/Internal/External
- **View** resource details in table:
  - ID, Name, Type, Team, Location
  - Contract type, Cost per hour
  - Qualifications (skills)
- **Delete** resources (with confirmation)
- **Add/Edit** buttons ready (forms need implementation)

#### Requests Page (`/requests`)
- **View** all work requests in table:
  - ID, Location, Date
  - Time window, Duration
  - Workers needed, Qualifications
- **Delete** requests (with confirmation)
- **Add/Edit** buttons ready (forms need implementation)

## What Works Now

- Navigation between pages
- Header showing live statistics (updates every 30s)
- Resources list with filtering and delete
- Requests list with delete
- Full API integration
- Responsive design with Tailwind CSS

## What Needs Implementation

1. **Add/Edit Forms** for Resources and Requests
2. **Constraints Editor** - Form to edit legal constraints
3. **Locations Editor** - Distance matrix management
4. **Solver Interface** - Configuration form and execution
5. **Dashboard** - KPI cards and visualizations
6. **Plans Management** - List and comparison

## Troubleshooting

### Backend Not Starting
- Check if port 5000 is available
- Verify database file exists: `database/cff_scheduler.db`
- Run migration again if needed

### Frontend Not Loading Data
- Verify backend is running on port 5000
- Check browser console for errors
- Verify `.env` file has correct API URL

### Database Issues
```bash
# Reset database
rm database/cff_scheduler.db
python database/migrations.py
```

## Project Structure

```
Use_case_1/
├── database/
│   ├── cff_scheduler.db     # SQLite database
│   ├── migrations.py        # Data import script
│   └── db_manager.py        # CRUD operations
├── api/
│   ├── app.py              # Flask application
│   └── routes/             # API endpoints
└── frontend/
    ├── src/
    │   ├── components/     # React components
    │   ├── pages/          # Page components
    │   └── services/       # API client
    └── package.json
```

## API Endpoints Reference

### Resources
- `GET /api/resources?type=internal` - List resources
- `GET /api/resources/:id` - Get single resource
- `POST /api/resources` - Create resource
- `PUT /api/resources/:id` - Update resource
- `DELETE /api/resources/:id` - Delete resource

### Requests
- `GET /api/requests` - List requests
- `POST /api/requests` - Create request
- `PUT /api/requests/:id` - Update request
- `DELETE /api/requests/:id` - Delete request

### Solver
- `POST /api/solver/run` - Run optimization

### Plans
- `GET /api/plans` - List all plans
- `GET /api/plans/:id` - Get plan details
- `GET /api/plans/:id/dashboard` - Get plan dashboard data
- `DELETE /api/plans/:id` - Delete plan

## Next Development Steps

1. Implement Resource/Request forms (modals with validation)
2. Build Constraints editor
3. Create Locations/Distance matrix editor
4. Implement Solver configuration interface
5. Build Dashboard with KPI visualizations
6. Add Plans management and comparison
7. Add error handling and loading states
8. Implement form validation
9. Add notifications/toasts
10. Polish UI/UX

## Support

- Backend README: `/Use_case_1/README_UI.md`
- Frontend README: `/Use_case_1/frontend/FRONTEND_README.md`
- API Documentation: Check `README_UI.md` for endpoint details

---

**Current Status:** Foundation complete with working navigation, data viewing, and basic CRUD operations. Ready for form implementation and dashboard development.
