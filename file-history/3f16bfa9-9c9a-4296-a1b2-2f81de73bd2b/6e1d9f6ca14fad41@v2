"""
Test Case: TC-F-004-01
Requirement: F-004 - Add database reset endpoint with safety code
Description: POST /admin/reset-database with correct code "270195", verify all records deleted and response returns deleted count
Generated: 2025-10-01T14:59:00Z
"""

import requests
import sqlite3
import time

def test_TC_F_004_01():
    """Test database reset with correct safety code"""

    api_endpoint = "http://localhost:8000/admin/reset-database"
    db_path = "/home/javiervel/clients/bosenet/ai-timesheet/inference/docker_files_api_copy2/shared/data/inference_results.db"

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # Insert test records
        for i in range(50):
            cursor.execute("""
                INSERT INTO inference_results
                (sentence, answer, mode, score, batch_id)
                VALUES (?, ?, ?, ?, ?)
            """, (
                f"TC-F-004-01 test record {i}",
                "accepted", "BERT", 0.90, None
            ))
        conn.commit()

        # Get initial count
        cursor.execute("SELECT COUNT(*) FROM inference_results")
        initial_count = cursor.fetchone()[0]
        print(f"Initial record count: {initial_count}")

        # Send reset request with correct safety code
        response = requests.post(
            api_endpoint,
            json={"safety_code": "270195"},
            timeout=10
        )

        # Verify response
        assert response.status_code == 200, f"Expected 200, got {response.status_code}"

        data = response.json()
        assert "message" in data, "Response missing 'message' field"
        assert "deleted_records" in data, "Response missing 'deleted_records' field"
        assert data["message"] == "Database reset successful", f"Unexpected message: {data['message']}"
        assert data["deleted_records"] == initial_count, \
            f"Expected {initial_count} deleted, got {data['deleted_records']}"

        # Verify database is empty
        cursor.execute("SELECT COUNT(*) FROM inference_results")
        final_count = cursor.fetchone()[0]
        assert final_count == 0, f"Database should be empty, has {final_count} records"

        print(f"Success: Deleted {data['deleted_records']} records")

    finally:
        conn.close()

if __name__ == "__main__":
    try:
        test_TC_F_004_01()
        print("TC-F-004-01: PASSED")
    except AssertionError as e:
        print(f"TC-F-004-01: FAILED - {e}")
    except Exception as e:
        print(f"TC-F-004-01: ERROR - {e}")
