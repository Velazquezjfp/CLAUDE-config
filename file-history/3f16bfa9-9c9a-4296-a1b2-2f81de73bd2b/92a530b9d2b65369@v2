"""
Test Case: TC-F-004-08
Requirement: F-004 - Add database reset endpoint with safety code
Description: After successful reset, refresh dashboard and verify all counters show 0
Generated: 2025-10-01T14:59:00Z

Note: This test combines API and Playwright for end-to-end validation
"""

import requests
import sqlite3
import time

def test_TC_F_004_08():
    """Test dashboard counters show 0 after database reset"""

    api_reset = "http://localhost:8000/admin/reset-database"
    api_stats = "http://localhost:8001/api/stats"
    db_path = "/home/javiervel/clients/bosenet/ai-timesheet/inference/docker_files_api_copy2/shared/data/inference_results.db"

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # Insert test records
        for i in range(25):
            cursor.execute("""
                INSERT INTO inference_results
                (sentence, answer, mode, score, batch_id)
                VALUES (?, ?, ?, ?, ?)
            """, (
                f"TC-F-004-08 record {i}",
                "accepted", "BERT", 0.90, None
            ))
        conn.commit()

        # Reset database
        response = requests.post(api_reset, json={"safety_code": "270195"}, timeout=10)
        assert response.status_code == 200

        # Query dashboard stats
        stats_response = requests.get(api_stats, timeout=10)
        assert stats_response.status_code == 200

        data = stats_response.json()
        summary = data.get("summary", {})

        # Verify all counters are 0
        assert summary.get("total_inferences", -1) == 0, \
            f"total_inferences should be 0, got {summary.get('total_inferences')}"
        assert summary.get("bert_usage", -1) == 0, \
            f"bert_usage should be 0, got {summary.get('bert_usage')}"
        assert summary.get("llm_usage", -1) == 0, \
            f"llm_usage should be 0, got {summary.get('llm_usage')}"

        print("Success: All dashboard counters show 0 after reset")

        # TODO: Also test with MCP Playwright
        # Navigate to http://localhost:8001
        # Verify displayed counters all show 0

    finally:
        conn.close()

if __name__ == "__main__":
    try:
        test_TC_F_004_08()
        print("TC-F-004-08: PASSED")
    except AssertionError as e:
        print(f"TC-F-004-08: FAILED - {e}")
    except Exception as e:
        print(f"TC-F-004-08: ERROR - {e}")
