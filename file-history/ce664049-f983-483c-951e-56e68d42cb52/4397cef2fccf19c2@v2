"""
Test Case: TC-F-002-04
Requirement: F-002 - Standardize location values across frontend, backend, and database
Description: Create request with location='Lusanne' (typo), verify API returns 400 error with message "Location 'Lusanne' not found"
Generated: 2025-10-27T00:00:00Z
"""

def test_TC_F_002_04():
    """Verify API rejects invalid location (typo) with clear error message"""
    import requests
    import json

    API_BASE_URL = "http://localhost:5000"

    # Prepare test data with typo in location
    test_request = {
        "id": "TEST-REQ-001",
        "location": "Lusanne",  # Typo - should be 'Lausanne'
        "start_date": "2025-01-15",
        "start_time": "08:00",
        "duration_hours": 4.0,
        "people_needed": 2,
        "description": "Test request with invalid location",
        "qualifications": ["Q1"]
    }

    # Send POST request to create work request
    response = requests.post(
        f"{API_BASE_URL}/api/requests",
        json=test_request,
        headers={"Content-Type": "application/json"}
    )

    # Verify response status code indicates error (400 or 500)
    assert response.status_code in [400, 500], \
        f"Expected status 400 or 500, got {response.status_code}"

    # Verify error message mentions the location
    response_data = response.json()
    assert "success" in response_data and response_data["success"] is False, \
        "Response should indicate failure"
    assert "error" in response_data, "Response should contain error message"

    error_msg = response_data["error"].lower()
    assert "location" in error_msg or "foreign key" in error_msg or "lusanne" in error_msg, \
        f"Error message should mention location issue, got: {response_data['error']}"

    # Verify request was not created
    get_response = requests.get(f"{API_BASE_URL}/api/requests/TEST-REQ-001")
    assert get_response.status_code == 404, \
        "Request should not have been created"

    print(f"âœ“ API correctly rejected invalid location 'Lusanne' (typo)")

if __name__ == "__main__":
    try:
        test_TC_F_002_04()
        print("TC-F-002-04: PASSED")
    except AssertionError as e:
        print(f"TC-F-002-04: FAILED - {e}")
    except Exception as e:
        print(f"TC-F-002-04: ERROR - {e}")
