"""
Test Case: TC-F-002-07
Requirement: F-002 - Standardize location values across frontend, backend, and database
Description: Create resource at 'Bern', create request at 'Zurich', run solver, verify travel distance calculation uses distance matrix correctly (Bern to Zurich = 120 km)
Generated: 2025-10-27T00:00:00Z
"""

def test_TC_F_002_07():
    """Verify solver correctly calculates travel distance using standardized location names"""
    import requests
    import sqlite3

    API_BASE_URL = "http://localhost:5000"
    DB_PATH = "/home/javiervel/clients/CFF/algo-test/Use_case_1/database/cff_scheduler.db"

    # Test IDs
    resource_id = "TEST-R-BERN"
    request_id = "TEST-REQ-ZURICH"

    try:
        # Step 1: Create test resource at 'Bern'
        test_resource = {
            "id": resource_id,
            "name": "Test Resource Bern",
            "team": "Test Team",
            "home_location": "Bern",
            "contract_type": "day",
            "weekly_hours": 40,
            "resource_type": "internal",
            "qualifications": ["Maintenance"]
        }

        resource_response = requests.post(
            f"{API_BASE_URL}/api/resources",
            json=test_resource,
            headers={"Content-Type": "application/json"}
        )
        assert resource_response.status_code == 201, \
            f"Failed to create test resource: {resource_response.json()}"

        # Step 2: Create test request at 'Zurich'
        test_request = {
            "id": request_id,
            "location": "Zurich",
            "start_date": "2025-01-20",
            "start_time": "09:00",
            "duration_hours": 4.0,
            "people_needed": 1,
            "description": "Test request at Zurich",
            "qualifications": ["Maintenance"]
        }

        request_response = requests.post(
            f"{API_BASE_URL}/api/requests",
            json=test_request,
            headers={"Content-Type": "application/json"}
        )
        assert request_response.status_code == 201, \
            f"Failed to create test request: {request_response.json()}"

        # Step 3: Verify distance in database
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT distance_km FROM location_distances
            WHERE from_location='Bern' AND to_location='Zurich'
        """)
        distance = cursor.fetchone()
        conn.close()

        assert distance is not None, "Distance Bern→Zurich not found in database"
        assert distance[0] == 120.0, f"Expected distance 120 km, got {distance[0]} km"

        # Step 4: Run solver
        solver_config = {
            "name": "Test F-002-07 Plan",
            "objective_type": "travel",
            "time_limit_seconds": 60,
            "max_travel_minutes": 200
        }

        solver_response = requests.post(
            f"{API_BASE_URL}/api/solver/run",
            json=solver_config,
            headers={"Content-Type": "application/json"}
        )

        assert solver_response.status_code == 200, \
            f"Solver failed: {solver_response.json()}"

        solver_result = solver_response.json()
        assert solver_result.get("success") is True, \
            f"Solver execution failed: {solver_result.get('error', 'Unknown error')}"

        # Step 5: Verify solver completed without location-related errors
        plan_id = solver_result["data"]["plan_id"]
        assert plan_id is not None, "Plan ID not returned"

        print(f"✓ Solver successfully processed Bern→Zurich distance (120 km)")
        print(f"✓ Plan created: {plan_id}")

    finally:
        # Cleanup: Delete test data
        requests.delete(f"{API_BASE_URL}/api/resources/{resource_id}")
        requests.delete(f"{API_BASE_URL}/api/requests/{request_id}")

if __name__ == "__main__":
    try:
        test_TC_F_002_07()
        print("TC-F-002-07: PASSED")
    except AssertionError as e:
        print(f"TC-F-002-07: FAILED - {e}")
    except Exception as e:
        print(f"TC-F-002-07: ERROR - {e}")
